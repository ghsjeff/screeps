var roleInvader = {
    run: function (creep) {
        
        delete creep.memory.job;
        delete creep.memory.fighting;

        // Report when less than 50% Health
        if (creep.hits < (creep.hitsMax /2)) {  
            creep.say(creep.hits+'/'+creep.hitsMax);
        }
        
        if (creep.room.name == Game.rooms[creep.memory.homeRoom].memory.target) {
            //Look for enemies
            
            var enemies = creep.room.find(FIND_HOSTILE_CREEPS);
            var buildings = creep.room.find(FIND_HOSTILE_SPAWNS);
            
            
            if (creep.memory.fighting && enemies.length == 0) {
                delete creep.memory.fighting;
                delete creep.memory.job;
                creep.say('no enemies');
            }
            
            if (!creep.memory.fighting && (enemies.length || buildings.length)) {
                creep.memory.fighting = true;
                creep.say('fighting!');
            }
            
            if (creep.memory.fighting) {
                
                // what to do when fighting
                if (!creep.memory.job) {
                    if (enemies.length) {
                        creep.memory.job = enemies[enemies.length - 1].id;
                    } else if (buildings.length) {
                        creep.memory.job = buildings[0].id;
                    }
                }
                
                if (creep.memory.job) {
                    if (Game.getObjectById(creep.memory.job)) {
                        if (creep.rangedAttack(Game.getObjectById(creep.memory.job)) == ERR_NOT_IN_RANGE) {
                            creep.moveTo(Game.getObjectById(creep.memory.job));
                        } else {
                        }
                    } else {
                        creep.memory.job = false;
                    }
                }
            } else {
                
                creep.moveTo(new RoomPosition(25,25, creep.memory.homeRoom));
                
            }
        } else {
            var allStructuresInRoom = creep.room.find(FIND_STRUCTURES);
            
            let spawns = _.filter(allStructuresInRoom, (structure) => structure.structureType == STRUCTURE_SPAWN);
            
            var enemies = Game.rooms[creep.room.memory.target].find(FIND_HOSTILE_CREEPS);
            
            // We can't attack if still Upgrade Blocked.
            if (!enemies.length) {
                creep.say("Recycle me...");
                if (spawns[0].recycleCreep(creep) == ERR_NOT_IN_RANGE) {
                    creep.moveTo(spawns[0].pos);
                }
                //creep.moveTo(creep.room.controller.pos);
            } else {
                // go to attack room
                creep.moveTo(new RoomPosition(25,25, Game.rooms[creep.memory.homeRoom].memory.target));
            }
        }
    }
}

module.exports = roleInvader;

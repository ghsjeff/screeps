// This function handles creep energy withdrawal
// creepWithdraw.run(creep);

var roleTransfer = require('role.transfer');

var creepWithdraw = {
    
    run: function(creep) {
        
        if (!creep.memory.job) {
            var drops = creep.room.find(FIND_DROPPED_RESOURCES);
            
            var allStructuresInRoom = creep.room.find(FIND_STRUCTURES);
            
            var spawns = _.filter(allStructuresInRoom, (structure) => (structure.structureType == STRUCTURE_SPAWN && structure.energy > 50));
        
            var extensions = _.filter(allStructuresInRoom, (structure) => (structure.structureType == STRUCTURE_EXTENSION && structure.energy > 0));
            
            var containers = _.filter(allStructuresInRoom, (structure) => (structure.structureType == STRUCTURE_CONTAINER && structure.store.energy >= 800));

            if (creep.room.storage && creep.room.storage.store.energy > 0) {
                    creep.memory.job = creep.room.storage.id;
            } else if (spawns.length && creep.memory.role != 'filler') {
                creep.memory.job = spawns[0].id;
//            } else if (extensions.length) {
//                creep.memory.job = extensions[Math.floor(Math.random() * extensions.length)].id;
            } else if (drops.length && creep.room.find(FIND_HOSTILE_CREEPS).length == 0) {
                var drop = creep.pos.findClosestByPath(FIND_DROPPED_RESOURCES, (drop) => drop.resourceType == RESOURCE_ENERGY);
                if (creep.pickup(drop) == ERR_NOT_IN_RANGE) {
                    creep.moveTo(drop);
                }
            } else if (containers.length) {
                creep.memory.job = containers[0].id;
            } else {
                if (extensions.length) {
                    creep.moveTo(extensions[0]);
                }
            }
            
        } else {
            
            if (creep.room.memory.status == 'unpaused' || creep.memory.role == 'filler') {
                
                if (creep.withdraw(Game.getObjectById(creep.memory.job), RESOURCE_ENERGY) == ERR_NOT_IN_RANGE) {
                    creep.moveTo(Game.getObjectById(creep.memory.job));
                } else {
                    delete creep.memory.job;
                    
                }
                
            } else {
                creep.moveTo(creep.room.controller);
                //roleTransfer.run(creep);
            }
            
            if (creep.memory.job) {
                if (Game.getObjectById(creep.memory.job).structureType != STRUCTURE_STORAGE) {
                    if (Game.getObjectById(creep.memory.job).energy == 0) {
                        delete creep.memory.job;
                    }
                } else {
                    if (Game.getObjectById(creep.memory.job).store.energy < 10) {
                        delete creep.memory.job;
                    }
                }
                
            }
        }
    }
}

module.exports = creepWithdraw;
